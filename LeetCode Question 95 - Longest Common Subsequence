LeetCode Question 95 - Longest Common Subsequence

Description : Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.

Solution : 
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int i = text1.length()-1,j = text2.length()-1;
        int[][] dp = new int[text1.length()+1][text2.length()+1];
        for(int row[]:dp) Arrays.fill(row,-1);
        return lcs(i,j,text1,text2,dp);
    }

    public int lcs(int i, int j , String s1, String s2,int[][] dp){
        if(i<0||j<0) return 0;

        if(dp[i][j]!=-1) return dp[i][j];
        // Match
        if(s1.charAt(i)==s2.charAt(j)) return dp[i][j] = 1+lcs(i-1,j-1,s1,s2,dp);
        int t1 = lcs(i-1,j,s1,s2,dp);
        int t2 = lcs(i,j-1,s1,s2,dp);
        dp[i][j] = Math.max(t1,t2);

        return dp[i][j];
    }
}
