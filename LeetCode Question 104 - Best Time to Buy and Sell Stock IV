LeetCode Question 104 - Best Time to Buy and Sell Stock IV

Description : You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.

Solution : 
class Solution {
    public int maxProfit(int k,int[] arr) {
        int[][][] dp = new int[arr.length][2][k+1];
        for (int[][] twoDArray : dp) {
            for (int[] oneDArray : twoDArray) {
                Arrays.fill(oneDArray, -1);
            }
        }

        return profit(0,1,k,arr,dp);
    }
    public int profit(int i, int buy, int k, int[] arr,int[][][] dp){
        if(i>=arr.length||k<=0) return 0;
        if(dp[i][buy][k] != -1) return dp[i][buy][k];
        if(buy==1){
            int by = -arr[i] + profit(i+1,0,k,arr,dp);
            int notBy = 0 + profit(i+1,1,k,arr,dp);
            dp[i][buy][k] = Math.max(by,notBy);
        }else{
            int sell = arr[i] + profit(i+1,1,k-1,arr,dp);
            int notSell = 0+profit(i+1,0,k,arr,dp);
            dp[i][buy][k] = Math.max(sell,notSell);
        }

        return dp[i][buy][k];
    }
}
