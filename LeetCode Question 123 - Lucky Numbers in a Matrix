LeetCode Question 123 - Lucky Numbers in a Matrix

Descritpion : Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.

A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.

 

Example 1:

Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.
Example 2:

Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.

Solution : 
class Solution {
    public List<Integer> luckyNumbers (int[][] arr) {
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();

        for(int[] row : arr){
            list1.add(findMin(row));
        }

        for(int j = 0;j<arr[0].length;j++){
            int max = Integer.MIN_VALUE;
            for(int i = 0;i<arr.length;i++){
                max = Math.max(arr[i][j],max);
            }
            list2.add(max);
        }
        
        List<Integer> list3 = new ArrayList<>();
        for(int i = 0;i<arr.length;i++){
            for(int j = 0;j<arr[0].length;j++){
                if(arr[i][j] == list1.get(i) && arr[i][j] == list2.get(j)){
                    list3.add(arr[i][j]);
                }
            }
        }
        return list3;
    }

    public int findMin(int[] arr){
        int min = Integer.MAX_VALUE;
        for(int i : arr){
            if(i<min){
                min = i;
            }
        }
        return min;
    }
}
