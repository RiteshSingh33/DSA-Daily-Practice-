LeetCode Question 121 - Delete Nodes And Return Forest

Description : Given the root of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest. You may return the result in any order.

 

Example 1:


Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]
Example 2:

Input: root = [1,2,4,null,3], to_delete = [3]
Output: [[1,2,4]]
 

Constraints:

The number of nodes in the given tree is at most 1000.
Each node has a distinct value between 1 and 1000.
to_delete.length <= 1000
to_delete contains distinct values between 1 and 1000.

Solution : 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<TreeNode> ans = new ArrayList<>();
    public List<TreeNode> delNodes(TreeNode root, int[] a) {
        Map<Integer,Boolean> map = new HashMap<>();
        for(int elem : a){
            map.put(elem,true);
        }

        dfs(root,map,true);
        return ans;
    }
    public void dfs(TreeNode root,Map<Integer,Boolean> map,boolean isRoot){
        if(root==null) return;

        if(map.containsKey(root.val)){
            dfs(root.left,map,true);
            dfs(root.right,map,true);
        }else{
            if(isRoot==true) ans.add(root);

            TreeNode left = root.left;
            TreeNode right = root.right;

            if(root.left!=null){
                if(map.containsKey(root.left.val)){
                    root.left = null;
                }
            }

            if(root.right!=null){
                if(map.containsKey(root.right.val)){
                    root.right = null;
                }
            }

            dfs(left,map,false);
            dfs(right,map,false);
        }
    }
}
