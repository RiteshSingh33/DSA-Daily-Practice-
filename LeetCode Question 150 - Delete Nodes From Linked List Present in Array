LeetCode Question 150 - Delete Nodes From Linked List Present in Array

Description : You are given an array of integers nums and the head of a linked list. Return the head of the modified linked list after removing all nodes from the linked list that have a value that exists in nums.

 

Example 1:

Input: nums = [1,2,3], head = [1,2,3,4,5]

Output: [4,5]

Explanation:



Remove the nodes with values 1, 2, and 3.

Example 2:

Input: nums = [1], head = [1,2,1,2,1,2]

Output: [2,2,2]

Explanation:



Remove the nodes with value 1.

Example 3:

Input: nums = [5], head = [1,2,3,4]

Output: [1,2,3,4]

Explanation:



No node has value 5.


Solution : 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode modifiedList(int[] arr, ListNode head) {
        // Set<Integer> set = new HashSet<>();
        // for(int i : arr) set.add(i);
        // if(head==null) return null;


        // // Using Dummy List
        // ListNode dummy = new ListNode(-1);
        // dummy.next = head;
        // ListNode curr = dummy;
        // while(curr!=null && curr.next!=null){
        //     while(curr.next!=null && set.contains(curr.next.val)){
        //         curr.next = curr.next.next;
        //     }
        //     curr = curr.next;
        // }

        // return dummy.next;




        // Using current and previous variable

        // while(head!=null && set.contains(head.val)) head = head.next;

        // ListNode curr = head;
        // ListNode prev = null;

        // while(curr!=null){
        //     if(set.contains(curr.val)){
        //         prev.next = curr.next;
        //         curr = curr.next;
        //     }else{
        //         prev = curr;
        //         curr = curr.next;
        //     }
        // }
        // return head;




        // Using a boolean array
        int max = 0;
        for(int n : arr){
            max = Math.max(max,n);
        }

        boolean[] vis = new boolean[max+1];
        for(int n : arr){
            vis[n] = true;
        }

        while(head!=null && head.val<=max && vis[head.val]) head = head.next;

        if(head==null && head.next == null) return head;
        ListNode curr = head.next;
        ListNode prev = head;
        while(curr!=null){
            if(curr.val<=max && vis[curr.val]){
                prev.next = curr.next;
            }else {
                prev = curr;
            }
            curr = curr.next;
        }
        return head;
    }
}
