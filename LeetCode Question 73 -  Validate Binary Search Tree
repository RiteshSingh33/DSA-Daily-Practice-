LeetCode Question 73 -  Validate Binary Search Tree

Description : Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left 
subtree
 of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [2,1,3]
Output: true
Example 2:


Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.

Solution : 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        // ArrayList<Integer> list = new ArrayList<>();
        
        // inorder(root,list);
        // System.out.println(list);
        // for(int i = 1;i<list.size();i++){
        //     if(list.get(i)<=list.get(i-1)) return false;
        // }
        // return true;

        return ans(root,Long.MIN_VALUE, Long.MAX_VALUE);
    }
    // public void inorder(TreeNode root, List<Integer> list){
    //     if(root==null) return;
    //     inorder(root.left,list);
    //     list.add(root.val);
    //     inorder(root.right,list);
    // }
    public boolean ans(TreeNode root, long min, long max){
        if(root == null) return true;
        if(root.val<=min||root.val>=max) return false;
        return ans(root.left,min,root.val) && ans(root.right,root.val,max);
    }
}
