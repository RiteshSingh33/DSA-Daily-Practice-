LeetCode Question 103 - Best Time to Buy and Sell Stock III

Description : You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

Solution : 
class Solution {
    public int maxProfit(int[] arr) {
        int[][][] dp = new int[arr.length][2][2];
        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp[i].length; j++) {
                Arrays.fill(dp[i][j], -1);
            }
        }
        return profit(0,1,1,arr,dp);
    }
    public int profit(int i, int buy, int k, int[] arr,int[][][] dp){
        if(i>=arr.length||k<0) return 0;
        if(dp[i][buy][k] != -1) return dp[i][buy][k];
        if(buy==1){
            int by = -arr[i] + profit(i+1,0,k,arr,dp);
            int notBy = 0 + profit(i+1,1,k,arr,dp);
            dp[i][buy][k] = Math.max(by,notBy);
        }else{
            int sell = arr[i] + profit(i+1,1,k-1,arr,dp);
            int notSell = 0+profit(i+1,0,k,arr,dp);
            dp[i][buy][k] = Math.max(sell,notSell);
        }

        return dp[i][buy][k];
    }
}
