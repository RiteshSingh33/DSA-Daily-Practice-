LeetCode Question 152 - Spiral Matrix IV

Description : You are given two integers m and n, which represent the dimensions of a matrix.

You are also given the head of a linked list of integers.

Generate an m x n matrix that contains the integers in the linked list presented in spiral order (clockwise), starting from the top-left of the matrix. If there are remaining empty spaces, fill them with -1.

Return the generated matrix.

 

Example 1:


Input: m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]
Output: [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]
Explanation: The diagram above shows how the values are printed in the matrix.
Note that the remaining spaces in the matrix are filled with -1.
Example 2:


Input: m = 1, n = 4, head = [0,1,2]
Output: [[0,1,2,-1]]
Explanation: The diagram above shows how the values are printed from left to right in the matrix.
The last space in the matrix is set to -1.

Solution : 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[][] spiralMatrix(int m, int n, ListNode head) {
        int[][] arr = new int[m][n];
        for(int[] row : arr){
            Arrays.fill(row,-1);
        }


        int startRow = 0, startCol = 0, endRow = m-1, endCol = n-1;
        while(head!=null){
            // Top 
            for(int i = startCol;i<=endCol;i++){
                if(head==null) break;
                arr[startRow][i] = head.val;
                head = head.next;
            }
            startRow++;

            // Right
            for(int i = startRow;i<=endRow;i++){
                if(head==null) break;
                arr[i][endCol] = head.val;
                head = head.next;
            }
            endCol--;

            // Bottom
            for(int i = endCol;i>=startCol;i--){
                if(head==null) break;
                arr[endRow][i] = head.val;
                head = head.next;
            }
            endRow--;

            // Left
            for(int i = endRow;i>=startRow;i--){
                if(head==null) break;
                arr[i][startCol] = head.val;
                head = head.next;
            }
            startCol++;
        }
        return arr;
    }
}
