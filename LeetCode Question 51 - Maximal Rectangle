LeetCode Question 51 - Maximal Rectangle

Description : Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.
Example 2:

Input: matrix = [["0"]]
Output: 0
Example 3:

Input: matrix = [["1"]]
Output: 1
 

Constraints:

rows == matrix.length
cols == matrix[i].length
1 <= row, cols <= 200
matrix[i][j] is '0' or '1'.

Solution : 
class Solution {
    public int maximalRectangle(char[][] mat) {
        if (mat.length == 0) return 0;
        
        int[] cur = new int[mat[0].length];
        int ans = histogram(cur);
        
        for (int i = 0; i < mat.length; i++) {
            for (int j = 0; j < mat[i].length; j++) {
                if (mat[i][j] == '1') {
                    cur[j] += 1;
                } else {
                    cur[j] = 0;
                }
            }
            int curAns = histogram(cur);
            ans = Math.max(curAns, ans);
        }
        return ans;
    }

    public int histogram(int[] arr) {
        int area = 0, max = 0;
        int[] nse = nextSmaller(arr);
        int[] pse = previousSmaller(arr);
        
        for (int i = 0; i < arr.length; i++) {
            area = arr[i] * (nse[i] - pse[i] - 1);
            if (area > max) {
                max = area;
            }
        }
        return max;
    }

    public int[] previousSmaller(int[] arr) {
        Stack<Integer> st = new Stack<>();
        int[] pse = new int[arr.length];
        pse[0] = -1;
        st.push(0);
        
        for (int i = 1; i < arr.length; i++) {
            while (st.size() > 0 && arr[st.peek()] >= arr[i]) st.pop();
            if (st.size() == 0) pse[i] = -1;
            else pse[i] = st.peek();
            st.push(i);
        }
        return pse;
    }

    public int[] nextSmaller(int[] heights) {
        Stack<Integer> st = new Stack<>();
        int[] nse = new int[heights.length];
        nse[nse.length - 1] = nse.length;
        st.push(nse.length - 1);
        
        for (int i = heights.length - 2; i >= 0; i--) {
            while (st.size() > 0 && heights[st.peek()] >= heights[i]) st.pop();
            if (st.size() == 0) nse[i] = nse.length;
            else nse[i] = st.peek();
            st.push(i);
        }
        return nse;
    }
}
