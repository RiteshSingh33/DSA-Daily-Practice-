LeetCode Question 2 - Search in Rotated Sorted Array

Description - There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Solution - 

class Solution {
    public int search(int[] arr, int target) {
        int n = arr.length;
        int min = minE(arr);
        int left = bs(arr,target,0,min-1);
        int right = bs(arr,target,min,n-1);
        if(right>left){
            return right;
        }
        return left;
    }
    public int bs(int[] arr,int target, int l, int r){
        while(l<=r){
            int mid = (l+r)/2;
            if(arr[mid]==target){
                return mid;
            }
            else if(arr[mid]<target){
                l = mid+1;
            }
            else{
                r = mid-1;
            }
        }
        return -1;
    }
    public int minE(int[] arr){
        int n = arr.length;
        int i = 0, j = n-1;
        while(i<j){
            int mid = (i+j)/2;
            if(arr[mid]<arr[j]){
                j = mid;
            }
            else{
                i = mid+1;
            }
        }
        return i;
    }
}
